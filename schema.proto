syntax = "proto3";

import "nanopb.proto";

option go_package = ".;pb";

message Wrapper {

    enum DataType {
        SPEED = 0;
        FORCE = 1;
        IMU = 2;
        POWER = 3;
        TEMPERATURE = 4;
        WIND = 5;
        VESC = 6;
        SETPOINT = 7;
        BLADE = 8;
        TURBINECONTROL = 9;
        ACC = 10;
        ACCGYRO = 11;
        HUMIDITYTEMP = 12;
        WINDDIR = 13;
        VESC2 = 14;
        HALLROTOR = 15;
        SUPERVISOR = 16;
        PITCH = 17;
        COMMONBLADE = 18;
        ALIVE = 19;
    }

    DataType type = 1;
    bytes data = 2 [(nanopb).max_size = 92]; 
    string target = 3 [(nanopb).max_size = 6];
}

message Speed {
    int64 time = 1; // millis since epoch
    float RPM = 2; // rev/min
}

message Force {
    int64 time = 1;
    float force = 2; // N
    int32 id = 3; // with multiple strain gauges; could consider an enum
}

message Power { // could later include a measurement point
    int64 time = 1;
    float current = 2; 
    float voltage = 3;
}

message Imu {
    int64 time = 1;
    Vector3 acc = 2; // m/ss
    Vector3 gyro = 3; // rad/s
    Quaternion orientation = 4; 
}

message Acc {
    uint64 time = 1;
    Vector3 acc = 2; // m/ss
}

message AccGyro {
    uint64 time = 1;
    Vector3 acc = 2; // m/ss
    Vector3 gyro = 3; // rad/s
}

message HumidityTemperature {
    int64 time = 1;
    float humidity = 2; // %
    float temperature = 3; // %
}

message Temperature {
    int64 time = 1;
    float temperature = 2;
}

message Wind {
    int64 time = 1;
    float speed = 2;
    float direction = 3;
}

message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quaternion { // needs a definition
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message Vesc {
    int64 time = 1;
    float avgMotorCurrent = 2;
    float avgInputCurrent = 3;
    float dutyCycleNow = 4;
    int32 rpm = 5;
    float inpVoltage = 6;
    float ampHours = 7;
    float ampHoursCharged = 8;
    int32 tachometer = 9;
    int32 tachometerAbs = 10;
}

message Vesc2 {

// // Local VESC FET temperature	
// // Local VESC Motor temperature	
// // Local VESC average Motor current	
// // Local VESC average Input current	
// // Local VESC ERPM	
// // Local VESC input voltage	
// // Local VESC fault status	
// // Local VESC PID position	
// mask made by KiteX, Andreas Okholm 10 april 2020. 

    int64 time = 1;
    float tempFET = 2;
    float tempMotor = 3;
    float avgMotorCurrent = 4;
    float avgInputCurrent = 5;
    int32 rpm = 6;
    float inpVoltage = 7;
    int32 fault = 8;
    float pidPosNow = 9;
    int32 tachometer = 10;
    float currentSP = 11;
}

message Setpoint {
    int64 time = 1;
    float RPM = 2;
    float current = 3;

    enum Origin {
        WEB = 0;
        ESP = 1;
    }
    Origin origin = 4;
}

message BladeControl {
    int64 time = 1;
    float pitch1 = 2;
    float pitch2 = 3;
    float pitch3 = 4;
    float collectivePitch = 5;
    float pitchP = 6;
    float pitchI = 7; 
}

message CommonBladeControl {
    int64 time = 1;
    float pitchSP = 2;
    float pitchEstimate = 3; 
    float pitchI = 4;
}

enum TurbineTopLevelMode {
    Storage = 0; // Not implemented yet - shuts off the VESC and ESP
    Idle = 1; // VESC is turned off. Wifi enabled. Clibrate; when entered from Storage. Pitch to 90 degree. Turn Servo off.
    Hold = 2; // Temporary locking the rotation of the turbine
    Operation = 3; // Normal power producing operation. 
    ManualOperationMode = 4; // Manual overwrite send TurbineControl Commands.
    ManualTurbineControlMode = 5; // Manual overwrite send TurbineControl Commands.
    ManualPitchCalibrateMode = 6; // Recalibrate pitch
};

enum OperationMode {
    Hunting = 0; // When there is not enough wind to sustain operation. Pitch up and wait for activity. Current = 0
    Generation = 1; // In automatic mode; Default mode.
    AboveCutout = 2; // When the blade pitch hits ~25 degree sustained; then go to 80 degree and set the maximum breaking torque to 
    ComsumePower = 3; // Go to pitch 90 degree and rotate -20 RPM backwards.
};

message TurbineSupervisorControl {
    TurbineTopLevelMode topLevelMode = 1;
    OperationMode operationMode = 2;
    TurbineControlLight turbControl = 3;
}

message Pitch {
    float offsetDistance = 1;
    float offsetAngle = 2; 
    bool overwrite = 3;
}

message TurbineControl {
    int64 time = 1;
    float value = 2;

    enum Command {
        Stop = 0; // Sets duty cycle = 0. 
        Auto = 1; // Automatic turbine control as defined on the ESP
        Speed = 2; // RPM
        Pos = 3; // Position relative to position when first set
        Current = 4; // winding current negative is breaking
    }

    Command command = 3;
    BladeControl blade = 4;
}

message TurbineControlLight {
    
    enum Command {
        Stop = 0; // Sets duty cycle = 0. 
        Auto = 1; // Automatic turbine control as defined on the ESP
        Speed = 2; // RPM
        Pos = 3; // Position relative to position when first set
        Current = 4; // winding current negative is breaking
        Cutout = 5; // load reduction, but still producing power enought power to keep the turbine powered.
    }
    
    Command command = 1;
    float value = 2;
    float collective = 3; 
}

message WindDirection {
    int64 time = 1;
    float direction = 2;
}

message HallRotor {
    int64 time = 1;
    bool on = 2;
}

message PitchControl {
    float collective = 1;
    bool speedControlEnabled = 2;
    float omegaRotor = 3;
    float omegaRotorSp = 4;
}

message ServoState {

    enum State {
        Operational = 0;
        Calibrating = 1;
    }
    State state = 1; // the state of affairs
    float pitch = 2; // pitch angle can only be trusted once it's calibrated.
}

message Alive {
    int64 time = 1;
    string id = 2 [(nanopb).max_size = 6];; // 6 chars. 
}