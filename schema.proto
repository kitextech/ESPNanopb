syntax = "proto3";

import "nanopb.proto";

option go_package = ".;pb";

message Wrapper {

    enum DataType {
        SPEED = 0;
        FORCE = 1;
        IMU = 2;
        POWER = 3;
        TEMPERATURE = 4;
        WIND = 5;
        VESC = 6;
        SETPOINT = 7;
        BLADE = 8;
        TURBINECONTROL = 9;
        ACC = 10;
        ACCGYRO = 11;
        HUMIDITYTEMP = 12;
        WINDDIR = 13;
        VESC2 = 14;
        HALLROTOR = 15;
        SUPERVISOR = 16;
        PITCH = 17;
        COMMONBLADE = 18;
        ALIVE = 19;
        UPDATEFREQUENCY = 20;
        ACCMAX = 21;
        WINDSONIC = 22;
        ROTORVEL = 23;
        DEBUG = 24;
        STEPPERFEEDBACK = 25;
        FAULT = 26;
        DCDC = 27;
        FAULTSTATUS = 28;
        IP = 29;
        BLADEZOFFSET = 30;
        TURBINEPITCHPIDTUNING = 31;
        FORCEARRAY = 32;
        FILAMENTDRY = 33;
        ROTORVELAERO = 34;
        WINDSTATS = 35;
        DEVICEINFO = 36;
        TURBINESTATS = 37;
        IMU6 = 38;
        HEADING = 39;
        MAGNETOMETER = 40;
        INVERTERPV = 41;
        INVERTERBATTERY = 42;
        INVERTERSTATUS = 43;
        INVERTERENERGY = 44;
        INVERTERTEMP = 45;
        GENERATORTEMPERATURE = 46;
        GENERATORANGLE = 47;
    }

    DataType type = 1;
    bytes data = 2 [(nanopb).max_size = 92]; 
    string target = 3 [(nanopb).max_size = 6];
}

message Speed {
    int64 time = 1; // millis since epoch
    float RPM = 2; // rev/min
}

message Force {
    int64 time = 1;
    float force = 2; // N
    int32 id = 3; // with multiple strain gauges; could consider an enum
}

message Power { // could later include a measurement point
    int64 time = 1;
    float current = 2; 
    float voltage = 3;
}

message Imu {
    int64 time = 1;
    Vector3 acc = 2; // m/ss
    Vector3 gyro = 3; // rad/s
    Quaternion orientation = 4; 
}

message Acc {
    uint64 time = 1;
    Vector3 acc = 2; // m/ss
}

message AccGyro {
    uint64 time = 1;
    Vector3 acc = 2; // m/ss
    Vector3 gyro = 3; // rad/s
}

message HumidityTemperature {
    int64 time = 1;
    float humidity = 2; // %
    float temperature = 3; // %
}

message Temperature {
    int64 time = 1;
    float temperature = 2;
}

message Wind {
    int64 time = 1;
    float speed = 2;
    float direction = 3;
}

message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quaternion { // needs a definition
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message Vesc {
    int64 time = 1;
    float avgMotorCurrent = 2;
    float avgInputCurrent = 3;
    float dutyCycleNow = 4;
    int32 rpm = 5;
    float inpVoltage = 6;
    float ampHours = 7;
    float ampHoursCharged = 8;
    int32 tachometer = 9;
    int32 tachometerAbs = 10;
}

message Vesc2 {

// // Local VESC FET temperature	
// // Local VESC Motor temperature	
// // Local VESC average Motor current	
// // Local VESC average Input current	
// // Local VESC ERPM	
// // Local VESC input voltage	
// // Local VESC fault status	
// // Local VESC PID position	
// mask made by KiteX, Andreas Okholm 10 april 2020. 

    int64 time = 1;
    float tempFET = 2;
    float tempMotor = 3;
    float avgMotorCurrent = 4;
    float avgInputCurrent = 5;
    int32 rpm = 6;
    float inpVoltage = 7;
    int32 fault = 8;
    float pidPosNow = 9;
    int32 tachometer = 10;
    float currentSP = 11;
}

message Setpoint {
    int64 time = 1;
    float RPM = 2;
    float current = 3;

    enum Origin {
        WEB = 0;
        ESP = 1;
    }
    Origin origin = 4;
}

message BladeControl {
    int64 time = 1;
    float pitch1 = 2;
    float pitch2 = 3;
    float pitch3 = 4;
    float collectivePitch = 5;
    float pitchP = 6;
    float pitchI = 7; 
}

message CommonBladeControl {
    int64 time = 1;
    float pitchSP = 2;
    float pitchEstimate = 3; 
    float pitchI = 4;
}

enum TurbineTopLevelMode {
    Storage = 0; // Not implemented yet - shuts off the VESC and ESP
    Idle = 1; // VESC is turned off. Wifi enabled. Clibrate; when entered from Storage. Pitch to 90 degree. Turn Servo off.
    Hold = 2; // Temporary locking the rotation of the turbine
    Operation = 3; // Normal power producing operation. 
    ManualOperationMode = 4; // Manual overwrite send TurbineControl Commands.
    ManualTurbineControlMode = 5; // Manual overwrite send TurbineControl Commands.
    ManualPitchCalibrateMode = 6; // Recalibrate pitch
    ShowMode = 7; // spin at low speed and pitch back and forth. 
    TorqueTestMode = 8; // Load the gearbox up to rated torque.
    OperationStall = 9; // Stall operation mode.
    Calibration = 10; // Used to calibrate the blade (indoor) 
    CalibrationOutdoor = 11; // Used to calibrate the blade (outdoor)
};

enum OperationMode {
    Hunting = 0; // When there is not enough wind to sustain operation. Pitch up and wait for activity. Current = 0
    Generation = 1; // In automatic mode; Default mode.
    AboveCutout = 2; // When the blade pitch hits ~25 degree sustained; then go to 80 degree and set the maximum breaking torque to 
    ComsumePower = 3; // Go to pitch 90 degree and rotate -20 RPM backwards.
    GenerationStall = 4; // Stall default operation mode. 
    PitchCalibration = 5; // if a pitch system fault has been detected - this mode can be used for recalibration 
    PreOperationWarning = 6; // A alarm state before operation begins.
};

message TurbineSupervisorControl {
    TurbineTopLevelMode topLevelMode = 1;
    OperationMode operationMode = 2;
    TurbineControlLight turbControl = 3;
}

message Pitch {
    float offsetDistance = 1;
    float offsetAngle = 2; 
    bool overwrite = 3;
}

message TurbineControl {
    int64 time = 1;
    float value = 2;

    enum Command {
        Stop = 0; // Sets duty cycle = 0. 
        Auto = 1; // Automatic turbine control as defined on the ESP
        Speed = 2; // RPM
        Pos = 3; // Position relative to position when first set
        Current = 4; // winding current negative is breaking
    }

    Command command = 3;
    BladeControl blade = 4;
}

message TurbineControlLight {
    
    enum Command {
        Stop = 0; // Sets duty cycle = 0. 
        Auto = 1; // Automatic turbine control as defined on the ESP
        Speed = 2; // RPM
        Pos = 3; // Position relative to position when first set
        Current = 4; // winding current negative is breaking
        Cutout = 5; // load reduction, but still producing power enought power to keep the turbine powered.
        AutoStall = 6; // Use rpm based algorithm to apply correct torque for stall control. 
    }
    
    Command command = 1;
    float value = 2;
    float collective = 3; 
}

message WindDirection {
    int64 time = 1;
    float direction = 2;
}

message HallRotor {
    int64 time = 1;
    bool on = 2;
}

message ServoState {

    enum State {
        Operational = 0; // calibrated
        Calibrating = 1; // Uncalibrated
    }
    State state = 1; // the state of affairs
    float pitch = 2; // pitch angle can only be trusted once it's calibrated.
}

message Alive {
    int64 time = 1;
    string id = 2 [(nanopb).max_size = 6]; // 6 chars. 
}

message UpdateFrequency {
    uint32 rateLimitImu = 1;
    uint32 rateLimitAccGyro = 2;
    uint32 rateLimitAcc = 3;
    uint32 rateLimitWindDir = 4;
    uint32 rateLimitVesc = 5;
    uint32 rateLimitCommonBladeControl = 6;  
    uint32 rateLimitRotorVel = 7;
    uint32 rateLimitStepperFeedback = 8;
    uint32 rateLimitDebug = 9;
}

message AccMax {
    uint64 time = 1;
    Vector3 accmax = 2; // m/ss
}

message WindSonic {
    uint64 time = 1;
    float speed = 2; // m/s
    float zVel = 3; // m/s
    float direction = 4; // deg
    float temp = 5; // degC
}

message RotorVel {
    uint64 time = 1;
    float genVel = 2;
    float gearVel = 3;
    float avgMotorCurrent = 4;
}

message DebugMessage {
    uint64 time = 1;
    float param1 = 2;
    float param2 = 3;
    float param3 = 4;
    float param4 = 5;
    float param5 = 6;
    float param6 = 7;
    float param7 = 8;
    float param8 = 9;
}

message StepperFeedback {
    uint64 time = 1;
    float current1 = 2;
    float current2 = 3;
    float collective = 4;
    float cyclic = 5;
    float turbinePitchAngle = 6;
    float accX = 7;
    float accY = 8;
    float gyroZ = 9;
    uint32 status = 10 [(nanopb).int_size = IS_8];
    float accZ = 11;
    float temp = 12;
}


message Fault {
    
    enum Type {
        AccX = 0;
        AccY = 1;
        GyroZ = 2;
        RotorOverspeed = 3;
        StepperCurrent1 = 4;
        StepperCurrent2 = 5;
        Cyclic = 6;
        RotorSpeedChance = 7;
        None = 8;
        PitchCutout = 9;
        InputOverVoltage = 10;
        VescTimeout = 11;
        StepTimeout = 12;
        ImuTimeout = 13;
        InputDisconnect = 14;
        Step_EncoderError1 = 15;
        Step_EncoderError2 = 16;
        Step_CalTimeout = 17;
        Step_DriverFault = 18;
        Step_ImuFault = 19;
        Step_HighCurSP = 20;
        BoomAngle = 21;
        Step_EncoderCal = 22;
        BeltSkip = 23;
        Gen_EncoderError = 24;
    }

    enum Severity {
        Recalibrate = 0; // medium
        Stop = 1; // high
        Cutout = 2; // low
    }
    
    uint64 time = 1;
    Type faultType = 2;
    Severity severity = 3;
    float value = 4;
}

message FaultStatus {
    
    uint64 time = 1;
    uint64 cutoutFlags = 2;
    uint64 recalFlags = 3;
    uint64 stopFlags = 4;
}

message DCDC {
    uint64 time = 1;
    float Uin = 2;
    float Uout = 3;
    float IOut = 4;
    float temp = 5;
    float pwm = 6;
}

message IP {
    uint64 time = 1;
    uint32 ip = 2;
}

message BladeZOffset {
    float offset = 1;
}

message TurbinePitchPIDTuning {
    float KPadjustment = 1;
    float KIadjustment = 2;
    float KDadjustment = 3;
    float betaFilterAdjustment = 5;
    float betaGain1 = 6;
    float betaGain2 = 7;
    float speedFilterRatio = 8;
    float betaFilterRatio = 9;
}

message ForceArray {
    int64 time = 1;
    repeated float force = 2 [packed = true, (nanopb).max_count = 4]; // N
}

message FilamentDry {
    uint64 time = 1;
    float tempIn = 2;
    float tempOut = 3;
    float humIn = 4;
    float humOut = 5;
    bool relayTemp = 6;
    bool relayHum = 7;
}

message RotorVelAero {
    uint64 time = 1;
    float TAero = 2;
    float TSR = 3;
    float windSpeed = 4;
}

message WindStats {
    uint64 time = 1;
    float mean = 2;
    float std = 3;
    float TI = 4;
    int32 seconds = 5;
}


message DeviceInfo {
    uint64 time = 1;
    uint32 hardVers = 2;
    uint32 softVers = 3;
    bytes gitHash = 4 [(nanopb).max_size = 20];
}

message TurbineStats {
    uint64 time = 1;
    uint32 runTime = 2;
    uint32 energy = 3;
    uint32 revs = 4;
    uint32 pitch = 5;
}

message Imu6 {
    int64 time = 1;
    Vector3 acc = 2; // m/ss
    Vector3 gyro = 3; // rad/s
}

message Heading {
    int64 time = 1;
    float heading = 2;
}

message Magnetometer {
    int64 time = 1;
    Vector3 mag = 2;
}

message InverterPV {
    int64 time = 1;
    float voltage = 2;
    float current = 3;
    float power = 4;
}

message InverterBattery {
    int64 time = 1;
    float voltage = 2;
    float current = 3;
    float stateOfCharge = 4;
    float temperature = 5;
}

message InverterStatus {
    int64 time = 1;
    uint32 status = 2;
    uint32 dayEnergy = 3;
}

message InverterEnergy {
    int64 time = 1;
    float dayEnergy = 4; // in kWh
    float totalEnergy = 5; // in kWh
}

message InverterTemp {
    int64 time = 1;
    float temp_igbt = 2; // in Celsius
    float temp_radiator = 3; // in Celsius
}

message GeneratorTemperature {
    int64 time = 1;
    float tempWinding = 2; // in Celsius
    float tempElectronics = 3; // in Celsius
    float tempSensor = 4; // in Celsius
}

message GeneratorAngle { // when pulses are received
    int64 time = 1;
    float angle = 2; // in degrees
} 